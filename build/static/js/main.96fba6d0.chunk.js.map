{"version":3,"sources":["components/workers/WorkerRow/WorkerRow.js","components/workers/WorkersList/WorkersList.js","services/workersService.js","store/actions/actionsWorkers/workers.js","store/actions/actionsWorkers/actionTypes.js","services/citiesService.js","shared/components/CitiesAutocomplete.js","hooks/useSearchStarwarsHero.js","components/BabysitterActionsBtns/SearchBabysitter.js","constans/typeOfSearchJob.js","pages/workers/WorkersPage/WorkersPage.js","pages/Home/Home.js","App.js","serviceWorker.js","store/reducers/workers/workers.js","index.js","components/workers/WorkerRow/WorkerRow.module.scss","pages/Home/Home.module.scss","pages/workers/WorkersPage/WorkersPage.module.scss","components/BabysitterActionsBtns/SearchBabysitter.module.scss"],"names":["WorkerRow","worker","Card","className","styles","card","CardContent","boxImg","mainimgPerson","src","Typography","color","gutterBottom","personalInfo","CardActions","classes","root","cardActions","Button","size","WorkersList","workersList","map","key","_id","getWorkers","cityId","a","axios","post","_loadWorkersSuccess","data","type","payload","getCities","term","name","getCitiesSearch","text","abortSignal","console","log","CitiesAutocomplete","props","React","useState","open","setOpen","options","setOptions","loading","length","searchFunc","inputText","setInputText","debouncedSearch","useConstant","AwesomeDebouncePromise","search","useAsync","useSearch","useEffect","styleAutocomplete","Autocomplete","id","inputValue","style","width","onInputChange","ev","val","setTextValue","onChange","setSelectedCity","onOpen","onClose","getOptionSelected","option","value","getOptionLabel","result","renderInput","params","TextField","autoFocus","placeholder","fullWidth","variant","InputProps","endAdornment","Fragment","CircularProgress","withRouter","jobType","setJobType","selectedCity","textValue","history","useHistory","useCallback","push","handlerTypeOptionSearch","handleClickOpen","container","onClick","Dialog","DialogTitle","DialogContent","disabled","WorkersPage","workers","useSelector","state","workersReducer","isLoading","dispatch","useDispatch","useParams","containerSpinner","thickness","Home","main","App","path","exact","component","Boolean","window","location","hostname","match","initialState","error","reducer","action","rootReducer","combineReducers","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunk","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.96fba6d0.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nimport Card from '@material-ui/core/Card';\r\nimport CardActions from '@material-ui/core/CardActions';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport Button from '@material-ui/core/Button';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport styles from './WorkerRow.module.scss'\r\n\r\nexport const WorkerRow = ({ worker }) => {\r\n    return (\r\n        <Card className={styles.card}>\r\n            <CardContent>\r\n                <div className={`${styles.boxImg} flex column`}>\r\n                    <img className={styles.mainimgPerson} src=\"http://tecnosisweb.com.br/assets/pages/img/people/img3-large.jpg\" />\r\n\r\n                    <Typography color=\"textSecondary\" gutterBottom className={styles.personalInfo}>\r\n                        <Typography>רמי </Typography>\r\n                        <Typography>35</Typography>\r\n                    </Typography>\r\n                    <Typography color=\"textSecondary\">\r\n                        תל אביב\r\n                    </Typography>\r\n                </div>\r\n            </CardContent>\r\n            <CardActions classes={{ root: styles.cardActions }}>\r\n                <Button size=\"small\">קרא עוד</Button>\r\n            </CardActions>\r\n        </Card>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { WorkerRow } from '../WorkerRow/WorkerRow'\r\n\r\nexport const WorkersList = ({ workersList }) => {\r\n    return (\r\n        <>\r\n            {workersList.map((worker) => (\r\n                <WorkerRow key={worker._id} worker={worker} />\r\n            ))}\r\n        </>\r\n    )\r\n}\r\n","import axios from 'axios';\r\nconst WORKERS_URL = (process.env.NODE_ENV !== 'development')\r\n    ? '/workers'\r\n    : '//localhost:8080/workers';\r\n\r\n\r\nexport const getWorkers = async (cityId) => {\r\n    return await axios.post(WORKERS_URL, { cityId })\r\n};\r\n\r\n","import { getWorkers } from '../../../services/workersService';\r\nimport * as actionTypes from './actionTypes';\r\n\r\nconst _loadWorkers = () => {\r\n    return {\r\n        type: actionTypes.LOAD_WORKERS,\r\n    }\r\n}\r\n\r\nconst _loadWorkersSuccess = (data) => {\r\n    return {\r\n        type: actionTypes.LOAD_WORKERS_SUCCESS,\r\n        payload: data\r\n    }\r\n}\r\n\r\nconst _loadWorkersFail = (error) => {\r\n    return {\r\n        type: actionTypes.LOAD_WORKERS_FAIL,\r\n        payload: error\r\n    }\r\n}\r\n\r\nexport const loadWorkers = (cityId) => async (dispatch) => {\r\n    dispatch(_loadWorkers())\r\n    try {\r\n        const { data } = await getWorkers(cityId);\r\n        dispatch(_loadWorkersSuccess(data))\r\n    } catch (e) {\r\n        console.log(e);\r\n        dispatch(_loadWorkersFail(e))\r\n    }\r\n};","export const LOAD_WORKERS = 'LOAD_WORKERS';\r\nexport const LOAD_WORKERS_SUCCESS = 'LOAD_WORKERS_SUCCESS';\r\nexport const LOAD_WORKERS_FAIL = 'LOAD_WORKERS_FAIL';","import axios from 'axios';\r\nconst CITIES_URL = (process.env.NODE_ENV !== 'development')\r\n    ? '/cities'\r\n    : '//localhost:8080/cities';\r\n\r\nexport const getCities = async (term) => {\r\n    return await axios.post(CITIES_URL, { name: term })\r\n};\r\n","import React, { useState, useEffect } from 'react'\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Autocomplete from '@material-ui/lab/Autocomplete';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport { useSearch } from '../../hooks/useSearchStarwarsHero';\r\nimport { getCities } from '../../services/citiesService';\r\n// get cities for autocomplete\r\nconst getCitiesSearch = async (text, abortSignal) => {\r\n  try {\r\n    const { data } = await getCities(text);\r\n    return data;\r\n  } catch (e) {\r\n    console.log('e', e);\r\n  }\r\n};\r\n\r\n\r\nexport const CitiesAutocomplete = (props) => {\r\n  const [open, setOpen] = React.useState(false);\r\n  const [options, setOptions] = React.useState([]);\r\n  const loading = open && options.length === 0;\r\n  const { inputText, setInputText, search } = useSearch(getCitiesSearch);\r\n\r\n\r\n  useEffect(() => {\r\n    let active = true;\r\n    if (!loading) {\r\n      return undefined;\r\n    }\r\n    return () => {\r\n      active = false;\r\n    };\r\n  }, [loading]);\r\n\r\n\r\n  useEffect(() => {\r\n    if (!open) {\r\n      setOptions([]);\r\n    }\r\n  }, [open]);\r\n\r\n  const handlerSelecetdOption = (ev, val) => {\r\n    props.setSelectedCity(val)\r\n  };\r\n\r\n  const handleValueChange = (ev, val) => {\r\n    setInputText(val);\r\n    props.setTextValue(val)\r\n  };\r\n\r\n  return (\r\n    <div className={props.styleAutocomplete}>\r\n      <Autocomplete\r\n        id=\"asynchronous-demo\"\r\n        inputValue={inputText}\r\n        style={{ width: '100%' }}\r\n        onInputChange={handleValueChange}\r\n        open={open}\r\n        onChange={handlerSelecetdOption}\r\n        onOpen={() => {\r\n          setOpen(true);\r\n        }}\r\n        onClose={() => {\r\n          setOpen(false);\r\n        }}\r\n        getOptionSelected={(option, value) => option.name === value.name}\r\n        getOptionLabel={option => option.name}\r\n        options={search.result}\r\n        loading={loading}\r\n        renderInput={params => (\r\n          <TextField\r\n            autoFocus\r\n            placeholder=\"הקלד שם עיר...\"\r\n            {...params}\r\n            fullWidth\r\n            variant=\"outlined\"\r\n            InputProps={{\r\n              ...params.InputProps,\r\n              endAdornment: (\r\n                <React.Fragment>\r\n                  {loading ? <CircularProgress color=\"inherit\" size={20} /> : null}\r\n                  {params.InputProps.endAdornment}\r\n                </React.Fragment>\r\n              ),\r\n            }}\r\n          />\r\n        )}\r\n      />\r\n\r\n    </div>\r\n  )\r\n}","import AwesomeDebouncePromise from 'awesome-debounce-promise';\r\nimport useConstant from 'use-constant';\r\nimport { useAsync } from 'react-async-hook';\r\nimport { useState } from 'react';\r\n\r\n\r\nexport const useSearch = (searchFunc) => {\r\n    // Handle the input text state\r\n    const [inputText, setInputText] = useState('');\r\n\r\n    // Debounce the original search async function\r\n    const debouncedSearch = useConstant(() =>\r\n        AwesomeDebouncePromise(searchFunc, 300)\r\n    );\r\n\r\n    const search = useAsync(\r\n        async () => {\r\n            if (inputText.length === 0) {\r\n                return [];\r\n            } else {\r\n                return debouncedSearch(inputText);\r\n            }\r\n        },\r\n        // Ensure a new request is made everytime the text changes (even if it's debounced)\r\n        [inputText]\r\n    );\r\n\r\n    // Return everything needed for the hook consumer\r\n    return {\r\n        inputText,\r\n        setInputText,\r\n        search,\r\n    };\r\n};","import React, { useState, useEffect, useCallback } from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport styles from './SearchBabysitter.module.scss'\r\nimport { CitiesAutocomplete } from '../../shared/components/CitiesAutocomplete';\r\nimport { withRouter, useHistory } from 'react-router-dom';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport { SEARCH_BABYSITTER, SEARCH_BABYSITTER_JOB } from '../../constans/typeOfSearchJob';\r\n\r\nconst BabysitterActionsBtns = () => {\r\n    const [jobType, setJobType] = useState('');\r\n    const [open, setOpen] = useState(false);\r\n    const [selectedCity, setSelectedCity] = useState();\r\n    const [textValue, setTextValue] = useState('');\r\n\r\n    const history = useHistory();\r\n\r\n    const search = useCallback(() => {\r\n        if (jobType === SEARCH_BABYSITTER) {\r\n            history.push(`/workers/${selectedCity._id}`)\r\n        };\r\n    }, [history, jobType, selectedCity]);\r\n\r\n    const handlerTypeOptionSearch = (type) => {\r\n        setJobType(type);\r\n        handleClickOpen()\r\n    };\r\n\r\n    const handleClickOpen = () => {\r\n        setOpen(true);\r\n    };\r\n\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n        setSelectedCity(null)\r\n    };\r\n\r\n\r\n    return (\r\n        <>\r\n            <div className={`flex justify-content-center ${styles.container}`}>\r\n                <Button variant=\"contained\" color=\"primary\" onClick={() => handlerTypeOptionSearch(SEARCH_BABYSITTER)}>\r\n                    מחפש/ת בייביסיטר\r\n            </Button>\r\n                <Button variant=\"contained\" color=\"primary\" onClick={() => handlerTypeOptionSearch(SEARCH_BABYSITTER_JOB)}>\r\n                    מחפש/ת עבודה בתור בייביסיטר\r\n            </Button>\r\n            </div>\r\n            <Dialog open={open} onClose={handleClose} fullWidth={true}>\r\n                <DialogTitle id=\"form-dialog-title\">ערים לבחירה</DialogTitle>\r\n                <DialogContent className=\"flex space-between full-width\">\r\n                    <CitiesAutocomplete\r\n                        setSelectedCity={setSelectedCity}\r\n                        setTextValue={setTextValue}\r\n                        styleAutocomplete=\"autocmplete-style-dialog\" />\r\n                    <Button onClick={search} variant=\"contained\" color=\"primary\" disabled={!selectedCity || textValue !== selectedCity.name}>\r\n                        חיפוש\r\n                    </Button>\r\n                </DialogContent>\r\n            </Dialog>\r\n\r\n        </>\r\n    )\r\n};\r\n\r\nexport default withRouter(BabysitterActionsBtns);","export const SEARCH_BABYSITTER = 'SEARCH_BABYSITTER';\r\nexport const SEARCH_BABYSITTER_JOB = 'SEARCH_BABYSITTER_JOB';","import React, { useEffect } from 'react'\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport { WorkersList } from '../../../components/workers/WorkersList/WorkersList';\r\nimport * as actions from '../../../store/actions/index';\r\nimport { useParams } from 'react-router-dom';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport styles from './WorkersPage.module.scss';\r\nimport BabysitterActionsBtns from '../../../components/BabysitterActionsBtns/SearchBabysitter';\r\n\r\nexport const WorkersPage = () => {\r\n    const workers = useSelector(state => state.workersReducer.workers);\r\n    const isLoading = useSelector(state => state.workersReducer.isLoading);\r\n    const dispatch = useDispatch();\r\n    let params = useParams();\r\n    useEffect(() => {\r\n        dispatch(actions.loadWorkers(params.cityId))\r\n    }, [dispatch, params])\r\n\r\n    useEffect(() => {\r\n\r\n    }, [])\r\n\r\n    return (\r\n        <>\r\n            {isLoading ?\r\n                <div className={styles.containerSpinner}><CircularProgress thickness={6.5} size={50} /></div>\r\n                : <div className=\"container\">\r\n                    <BabysitterActionsBtns />\r\n                    <WorkersList workersList={workers} />\r\n                </div>}\r\n        </>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport BabysitterActionsBtns from '../../components/BabysitterActionsBtns/SearchBabysitter';\r\nimport styles from './Home.module.scss';\r\n\r\nexport const Home = () => {\r\n    return (\r\n        <section>\r\n            <div className={styles.container}>\r\n                <div className={`${styles.main} flex justify-content-center`}>\r\n                    <div>\r\n                        <h2>נמאס לכם כבר לחפש בייביסיטר?</h2>\r\n                        <div>הגעתם למקום הנכון!</div>\r\n                        <div>כאן יהיה מרוכז כל המשרות לפי העיר שלכם</div>\r\n                    </div>\r\n                </div>\r\n                <div>\r\n                    <BabysitterActionsBtns />\r\n                </div>\r\n            </div>\r\n        </section>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport './App.css';\r\nimport { Route } from 'react-router-dom';\r\nimport { WorkersPage } from './pages/workers/WorkersPage/WorkersPage';\r\nimport { Home } from './pages/Home/Home';\r\n\r\nconst App = () => {\r\n  return (\r\n    <section>\r\n      <header className=\"navbar-app\">\r\n        <div></div>\r\n        <div>מאגר הבייביסיטר הגדול בישראל</div>\r\n      </header>\r\n      <Route path=\"/\" exact component={Home} />\r\n      <Route path=\"/workers/:cityId\" exact component={WorkersPage} />\r\n    </section>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import * as actionTypes from '../../actions/actionsWorkers/actionTypes';\r\nconst initialState = {\r\n    workers: [],\r\n    isLoading: false,\r\n    error: null\r\n};\r\n\r\n\r\nconst reducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case actionTypes.LOAD_WORKERS:\r\n            return {\r\n                ...state,\r\n                isLoading: true\r\n            }\r\n        case actionTypes.LOAD_WORKERS_SUCCESS:\r\n            return {\r\n                ...state,\r\n                workers: action.payload,\r\n                isLoading: false\r\n            }\r\n        case actionTypes.LOAD_WORKERS_FAIL:\r\n            return {\r\n                ...state,\r\n                isLoading: false,\r\n                error: action.payload\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default reducer;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, combineReducers, compose, applyMiddleware } from 'redux';\nimport workersReducer from './store/reducers/workers/workers';\nimport thunk from 'redux-thunk';\n\nconst rootReducer = combineReducers({\n    workersReducer\n});\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nconst store = createStore(rootReducer, composeEnhancers(applyMiddleware(thunk)));\n\nReactDOM.render(<Provider store={store}>\n    <Router><App /></Router>\n</Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"card\":\"WorkerRow_card__2wpkw\",\"boxImg\":\"WorkerRow_boxImg__3rWbo\",\"mainimgPerson\":\"WorkerRow_mainimgPerson__1atQE\",\"personalInfo\":\"WorkerRow_personalInfo___3vJo\",\"cardActions\":\"WorkerRow_cardActions__xEBTi\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Home_container__1AU0U\",\"main\":\"Home_main__3t5Ga\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"containerSpinner\":\"WorkersPage_containerSpinner__2Dox6\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"SearchBabysitter_container__8Oh9h\"};"],"sourceRoot":""}