{"version":3,"sources":["components/workers/WorkerRow/WorkerRow.js","components/workers/WorkersList/WorkersList.js","services/workersService.js","store/actions/actionsWorkers/workers.js","store/actions/actionsWorkers/actionTypes.js","pages/workers/WorkersPage/WorkersPage.js","shared/components/CitiesAutocomplete.js","hooks/useSearchStarwarsHero.js","components/BabysitterActionsBtns/SearchBabysitter.js","constans/typeOfSearchJob.js","pages/Home/Home.js","App.js","serviceWorker.js","store/reducers/workers/workers.js","index.js","pages/Home/Home.module.scss","components/BabysitterActionsBtns/SearchBabysitter.module.scss"],"names":["WorkerRow","worker","name","city","WorkersList","workersList","map","key","_id","getWorkers","cityId","a","axios","post","_loadWorkers","data","type","payload","WorkersPage","workers","useSelector","state","workersReducer","dispatch","useDispatch","params","useParams","useEffect","getCities","text","abortSignal","console","log","CitiesAutocomplete","props","React","useState","open","setOpen","options","setOptions","loading","length","searchFunc","inputText","setInputText","debouncedSearch","useConstant","AwesomeDebouncePromise","search","useAsync","useSearch","className","styleAutocomplete","Autocomplete","id","inputValue","style","width","onInputChange","ev","val","setTextValue","onChange","setSelectedCity","onOpen","onClose","getOptionSelected","option","value","getOptionLabel","result","renderInput","TextField","autoFocus","placeholder","fullWidth","variant","InputProps","endAdornment","Fragment","CircularProgress","color","size","withRouter","jobType","setJobType","selectedCity","textValue","history","useHistory","useCallback","push","handlerTypeOptionSearch","handleClickOpen","styles","container","Button","onClick","Dialog","DialogTitle","DialogContent","disabled","Home","circle","textTitle","main","sectionActionBtns","App","path","exact","component","Boolean","window","location","hostname","match","initialState","isLoading","typeSearchJob","reducer","action","rootReducer","combineReducers","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunk","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.d45b57ea.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nexport const WorkerRow = ({ worker }) => {\r\n    return (\r\n    <div>{worker.name} - {worker.city}</div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { WorkerRow } from '../WorkerRow/WorkerRow'\r\n\r\nexport const WorkersList = ({ workersList }) => {\r\n    return (\r\n        <>\r\n            {workersList.map((worker) => (\r\n                <WorkerRow key={worker._id} worker={worker} />\r\n            ))}\r\n        </>\r\n    )\r\n}\r\n","import axios from 'axios';\r\nconst WORKERS_URL = (process.env.NODE_ENV !== 'development')\r\n    ? '/workers'\r\n    : '//localhost:8080/workers';\r\n\r\n\r\nexport const getWorkers = async (cityId) => {\r\n    return await axios.post(WORKERS_URL, { cityId })\r\n};\r\n\r\n","import { getWorkers } from '../../../services/workersService';\r\nimport * as actionTypes from './actionTypes';\r\n\r\nconst _loadWorkers = (data) => {\r\n    return {\r\n        type: actionTypes.LOAD_WORKERS,\r\n        payload: data\r\n    }\r\n}\r\n\r\nexport const loadWorkers = (cityId) => async (dispatch) => {\r\n    const { data } = await getWorkers(cityId);\r\n    dispatch(_loadWorkers(data))\r\n};\r\n\r\nexport const setTypeJobSearch = (type) => {\r\n    return {\r\n        type: actionTypes.SET_TYPE_JOB_SEARCH,\r\n        payload: type\r\n    }\r\n}","export const LOAD_WORKERS = 'LOAD_WORKERS';\r\nexport const SET_TYPE_JOB_SEARCH = 'SET_TYPE_JOB_SEARCH';","import React, { useEffect } from 'react'\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport { WorkersList } from '../../../components/workers/WorkersList/WorkersList';\r\nimport * as actions from '../../../store/actions/index';\r\nimport { useParams } from 'react-router-dom';\r\n\r\nexport const WorkersPage = () => {\r\n    const workers = useSelector(state => state.workersReducer.workers);\r\n    const dispatch = useDispatch();\r\n    let params = useParams();\r\n    useEffect(() => {\r\n        dispatch(actions.loadWorkers(params.cityId))\r\n    }, [dispatch, params])\r\n\r\n    useEffect(() => {\r\n\r\n    }, [])\r\n\r\n    return (\r\n        <div>\r\n            <WorkersList workersList={workers} />\r\n        </div>\r\n    )\r\n}\r\n","import React, { useState, useEffect } from 'react'\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Autocomplete from '@material-ui/lab/Autocomplete';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport axios from 'axios';\r\nimport { useSearch } from '../../hooks/useSearchStarwarsHero';\r\n// get cities for autocomplete\r\nconst getCities = async (text, abortSignal) => {\r\n  try {\r\n    const { data } = await axios.post(`http://localhost:8080/cities`, { name: text });\r\n    return data;\r\n  } catch (e) {\r\n    console.log(e);\r\n  }\r\n};\r\n\r\n\r\nexport const CitiesAutocomplete = (props) => {\r\n  const [open, setOpen] = React.useState(false);\r\n  const [options, setOptions] = React.useState([]);\r\n  const loading = open && options.length === 0;\r\n  const { inputText, setInputText, search } = useSearch(getCities);\r\n\r\n\r\n  useEffect(() => {\r\n    let active = true;\r\n    if (!loading) {\r\n      return undefined;\r\n    }\r\n    return () => {\r\n      active = false;\r\n    };\r\n  }, [loading]);\r\n\r\n\r\n  useEffect(() => {\r\n    if (!open) {\r\n      setOptions([]);\r\n    }\r\n  }, [open]);\r\n\r\n  const handlerSelecetdOption = (ev, val) => {\r\n    props.setSelectedCity(val)\r\n  };\r\n\r\n  const handleValueChange = (ev, val) => {\r\n    setInputText(val);\r\n    props.setTextValue(val)\r\n  };\r\n\r\n  return (\r\n    <div className={props.styleAutocomplete}>\r\n      <Autocomplete\r\n        id=\"asynchronous-demo\"\r\n        inputValue={inputText}\r\n        style={{ width: '100%' }}\r\n        onInputChange={handleValueChange}\r\n        open={open}\r\n        onChange={handlerSelecetdOption}\r\n        onOpen={() => {\r\n          setOpen(true);\r\n        }}\r\n        onClose={() => {\r\n          setOpen(false);\r\n        }}\r\n        getOptionSelected={(option, value) => option.name === value.name}\r\n        getOptionLabel={option => option.name}\r\n        options={search.result}\r\n        loading={loading}\r\n        renderInput={params => (\r\n          <TextField\r\n            autoFocus\r\n            placeholder=\"הקלד שם עיר...\"\r\n            {...params}\r\n            fullWidth\r\n            variant=\"outlined\"\r\n            InputProps={{\r\n              ...params.InputProps,\r\n              endAdornment: (\r\n                <React.Fragment>\r\n                  {loading ? <CircularProgress color=\"inherit\" size={20} /> : null}\r\n                  {params.InputProps.endAdornment}\r\n                </React.Fragment>\r\n              ),\r\n            }}\r\n          />\r\n        )}\r\n      />\r\n\r\n    </div>\r\n  )\r\n}","import AwesomeDebouncePromise from 'awesome-debounce-promise';\r\nimport useConstant from 'use-constant';\r\nimport { useAsync } from 'react-async-hook';\r\nimport { useState } from 'react';\r\n\r\n\r\nexport const useSearch = (searchFunc) => {\r\n    // Handle the input text state\r\n    const [inputText, setInputText] = useState('');\r\n\r\n    // Debounce the original search async function\r\n    const debouncedSearch = useConstant(() =>\r\n        AwesomeDebouncePromise(searchFunc, 300)\r\n    );\r\n\r\n    const search = useAsync(\r\n        async () => {\r\n            if (inputText.length === 0) {\r\n                return [];\r\n            } else {\r\n                return debouncedSearch(inputText);\r\n            }\r\n        },\r\n        // Ensure a new request is made everytime the text changes (even if it's debounced)\r\n        [inputText]\r\n    );\r\n\r\n    // Return everything needed for the hook consumer\r\n    return {\r\n        inputText,\r\n        setInputText,\r\n        search,\r\n    };\r\n};","import React, { useState, useEffect, useCallback } from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport styles from './SearchBabysitter.module.scss'\r\nimport { CitiesAutocomplete } from '../../shared/components/CitiesAutocomplete';\r\nimport { withRouter, useHistory } from 'react-router-dom';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport { SEARCH_BABYSITTER, SEARCH_BABYSITTER_JOB } from '../../constans/typeOfSearchJob';\r\n\r\nconst BabysitterActionsBtns = () => {\r\n    const [jobType, setJobType] = useState('');\r\n    const [open, setOpen] = useState(false);\r\n    const [selectedCity, setSelectedCity] = useState();\r\n    const [textValue, setTextValue] = useState('');\r\n\r\n    const history = useHistory();\r\n\r\n    const search = useCallback(() => {\r\n        if (jobType === SEARCH_BABYSITTER) {\r\n            history.push(`/workers/${selectedCity._id}`)\r\n        };\r\n    }, [history, jobType, selectedCity]);\r\n\r\n    const handlerTypeOptionSearch = (type) => {\r\n        setJobType(type);\r\n        handleClickOpen()\r\n    };\r\n\r\n    const handleClickOpen = () => {\r\n        setOpen(true);\r\n    };\r\n\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n        setSelectedCity(null)\r\n    };\r\n\r\n\r\n    return (\r\n        <>\r\n            <div className={`flex justify-content-center ${styles.container}`}>\r\n                <Button variant=\"contained\" color=\"primary\" onClick={() => handlerTypeOptionSearch(SEARCH_BABYSITTER)}>\r\n                    מחפש/ת בייביסיטר\r\n            </Button>\r\n                <Button variant=\"contained\" color=\"primary\" onClick={() => handlerTypeOptionSearch(SEARCH_BABYSITTER_JOB)}>\r\n                    מחפש/ת עבודה בתור בייביסיטר\r\n            </Button>\r\n            </div>\r\n            <Dialog open={open} onClose={handleClose} fullWidth={true}>\r\n                <DialogTitle id=\"form-dialog-title\">ערים לבחירה</DialogTitle>\r\n                <DialogContent className=\"flex space-between full-width\">\r\n                    <CitiesAutocomplete\r\n                        setSelectedCity={setSelectedCity}\r\n                        setTextValue={setTextValue}\r\n                        styleAutocomplete=\"autocmplete-style-dialog\" />\r\n                    <Button onClick={search} variant=\"contained\" color=\"primary\" disabled={!selectedCity || textValue !== selectedCity.name}>\r\n                        חיפוש\r\n                    </Button>\r\n                </DialogContent>\r\n            </Dialog>\r\n\r\n        </>\r\n    )\r\n};\r\n\r\nexport default withRouter(BabysitterActionsBtns);","export const SEARCH_BABYSITTER = 'SEARCH_BABYSITTER';\r\nexport const SEARCH_BABYSITTER_JOB = 'SEARCH_BABYSITTER_JOB';","import React from 'react';\r\nimport BabysitterActionsBtns from '../../components/BabysitterActionsBtns/SearchBabysitter';\r\nimport styles from './Home.module.scss';\r\n\r\nexport const Home = () => {\r\n    return (\r\n        <section>\r\n            <div className={styles.container}>  \r\n                <header>\r\n                <div className={styles.circle}></div>\r\n                <div className={styles.textTitle}>מאגר הבייביסיטר הגדול בישראל</div>\r\n                </header>\r\n                <div className={styles.main}></div>\r\n                <div className={styles.sectionActionBtns}>\r\n                    <BabysitterActionsBtns />\r\n                </div>\r\n            </div>\r\n        </section>\r\n    )\r\n}\r\n","import React from 'react';\nimport './App.css';\nimport { Route } from 'react-router-dom';\nimport { WorkersPage } from './pages/workers/WorkersPage/WorkersPage';\nimport { Home } from './pages/Home/Home';\n\nconst App = () => {\n  return (\n    <section>\n      <Route path=\"/\" exact component={Home} />\n      <Route path=\"/workers/:cityId\" exact component={WorkersPage} />\n    </section>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import * as actionTypes from '../../actions/actionsWorkers/actionTypes';\r\nconst initialState = {\r\n    workers: [],\r\n    isLoading: false,\r\n    typeSearchJob: null\r\n};\r\n\r\n\r\nconst reducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case actionTypes.LOAD_WORKERS:\r\n            return {\r\n                ...state,\r\n                workers: action.payload\r\n            }\r\n        case actionTypes.SET_TYPE_JOB_SEARCH:\r\n            return {\r\n                ...state,\r\n                typeSearchJob: action.payload\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default reducer;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, combineReducers, compose, applyMiddleware } from 'redux';\nimport workersReducer from './store/reducers/workers/workers';\nimport thunk from 'redux-thunk';\n\nconst rootReducer = combineReducers({\n    workersReducer\n});\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nconst store = createStore(rootReducer, composeEnhancers(applyMiddleware(thunk)));\n\nReactDOM.render(<Provider store={store}>\n    <Router><App /></Router>\n</Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Home_container__1AU0U\",\"circle\":\"Home_circle__2w_uh\",\"textTitle\":\"Home_textTitle__8riQL\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"SearchBabysitter_container__8Oh9h\"};"],"sourceRoot":""}